// src/app/api/connections/follow/route.ts
// ‚úÖ ROTA FIXA - SEGUIR

import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

async function getUserId(req: NextRequest): Promise<string | null> {
  try {
    const authHeader = req.headers.get("Authorization");
    if (!authHeader?.startsWith("Bearer ")) return null;

    const token = authHeader.substring(7);
    const {
      data: { user },
      error,
    } = await supabase.auth.getUser(token);

    if (error || !user) return null;
    return user.id;
  } catch {
    return null;
  }
}

export async function POST(req: NextRequest) {
  console.log("üéØ POST /api/connections/follow recebido!");

  try {
    // Autentica√ß√£o
    const userId = await getUserId(req);
    if (!userId) {
      console.log("‚ùå N√£o autenticado");
      return NextResponse.json(
        { success: false, error: "N√£o autenticado" },
        { status: 401 }
      );
    }

    console.log("‚úÖ User autenticado:", userId);

    // Parse body
    const body = await req.json();
    const { following_id } = body;

    if (!following_id) {
      console.log("‚ùå following_id n√£o fornecido");
      return NextResponse.json(
        { success: false, error: "following_id √© obrigat√≥rio" },
        { status: 400 }
      );
    }

    console.log("üìù Seguindo:", following_id);

    // Valida√ß√£o: n√£o pode seguir a si mesmo
    if (userId === following_id) {
      return NextResponse.json(
        { success: false, error: "Voc√™ n√£o pode seguir a si mesmo" },
        { status: 400 }
      );
    }

    // Verificar se j√° est√° seguindo
    const { data: existing } = await supabase
      .from("connections")
      .select("id")
      .eq("follower_id", userId)
      .eq("following_id", following_id)
      .single();

    if (existing) {
      return NextResponse.json(
        { success: false, error: "Voc√™ j√° segue este usu√°rio" },
        { status: 400 }
      );
    }

    // Criar conex√£o
    console.log("üíæ Criando conex√£o...");
    const { data, error } = await supabase
      .from("connections")
      .insert([
        {
          follower_id: userId,
          following_id: following_id,
        },
      ])
      .select()
      .single();

    if (error) {
      console.error("‚ùå Erro ao criar:", error);
      return NextResponse.json(
        { success: false, error: "Erro ao seguir usu√°rio" },
        { status: 500 }
      );
    }

    console.log("‚úÖ Conex√£o criada!");

    return NextResponse.json(
      {
        success: true,
        data: data,
        message: "Seguindo com sucesso",
      },
      { status: 201 }
    );
  } catch (error: any) {
    console.error("üí• Erro cr√≠tico:", error);
    return NextResponse.json(
      {
        success: false,
        error: error.message || "Erro interno do servidor",
      },
      { status: 500 }
    );
  }
}
